// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  teacher
  student
}

model User {
  id           String   @id @unique @default(uuid()) @db.Uuid
  name         String   @db.VarChar(100)
  email        String   @unique @db.VarChar(150)
  password     String   @db.VarChar(255)
  passwordHash String   @map("password_hash")
  role         UserRole @default(student)
  refreshToken String?  @map("refresh_token")
  createdAt    DateTime @default(now()) @map("created_at")

  instructorProfile InstructorProfile[]
  studentProfile   StudentProfile[]
}

model InstructorProfile {
  id        String   @id @unique @default(uuid()) @db.Uuid
  user_id   String
  user      User     @relation(fields: [user_id], references: [id])
  firstName String   @db.VarChar(100) @map("first_name")
  lastName  String   @db.VarChar(100) @map("last_name")
  phone     String?  @db.VarChar(20)
  address   String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")

  instructorCoursesProfile InstructorCoursesProfile[]
}

model StudentProfile {
  id        String   @id @default(uuid())
  user_id   String
  user      User     @relation(fields: [user_id], references: [id])
  firstName String   @db.VarChar(100) @map("first_name")
  lastName  String   @db.VarChar(100) @map("last_name")
  phone     String?  @db.VarChar(20)
  address   String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
}

enum CourseLevel {
  beginner
  intermediate
  advanced
}

model CourseCategories {
  id          Int   @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  classifications CourseClassification[]
}

model CourseSubcategories {
  id          Int   @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  classifications CourseClassification[]
}

model Courses {
  id               String      @id @unique @default(uuid()) @map("uuid") @db.Uuid
  title            String      @db.VarChar(200)
  description      String
  requirement      String
  course_objective String
  language         String      @default("Spanish") @db.VarChar(100)
  level            CourseLevel @default(beginner)
  duration_hours   DateTime?   @db.Time()
  reading_hours    DateTime?   @db.Time()
  video_hours      DateTime?   @db.Time()
  created_at       DateTime    @default(now())
  update_at        DateTime    @default(now())

  classification           CourseClassification[]
  InstructorCoursesProfile InstructorCoursesProfile[]
}

model InstructorCoursesProfile {
  id            String            @id @default(uuid())
  course_id     String
  course        Courses           @relation(fields: [course_id], references: [id])
  instructor_id String
  instructor    InstructorProfile @relation(fields: [instructor_id], references: [id])
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
}

model CourseClassification {
  id             Int                 @id @default(autoincrement())
  course         Courses             @relation(fields: [course_id], references: [id], onDelete: Cascade)
  course_id      String
  category       CourseCategories    @relation(fields: [category_id], references: [id])
  category_id    Int
  subcategory    CourseSubcategories @relation(fields: [subcategory_id], references: [id])
  subcategory_id Int
}
